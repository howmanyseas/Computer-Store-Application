CREATE DATABASE COMPUTERSTORE;

CREATE TABLE SERVICE(
SERVICE_ID INT PRIMARY KEY,
SERVICE_NAME VARCHAR(30) NOT NULL,
SERVICE_PRICE INT NOT NULL
);

CREATE TABLE RETURN_ORDER(
RETURN_ID INT PRIMARY KEY,
RETURN_DATE DATE NOT NULL,
RETURN_REASON VARCHAR(100) NULL,
REFUND_AMOUNT INT NOT NULL,
);

CREATE TABLE CUSTOMER(
CUSTOMER_ID INT PRIMARY KEY,
CUS_USERNAME VARCHAR(20) NOT NULL,
CUS_PASSWORD VARCHAR(20) NOT NULL,
CUS_EMAIL VARCHAR(50) NOT NULL,
CUS_REG DATE NOT NULL,
CUS_DOB DATE NOT NULL,
ACCOUNT_STAT BIT NOT NULL,
CUS_FNAME VARCHAR(50) NOT NULL,
CUS_LNAME VARCHAR(50) NOT NULL,
)

CREATE TABLE DISCOUNT(
DISCOUNT_ID INT PRIMARY KEY,
DISCOUNT_CODE INT NOT NULL,
DISCOUNT_PERC INT NOT NULL,
EXP_DATE DATE NOT NULL,
);

CREATE TABLE CATEGORY(
CAT_ID INT PRIMARY KEY,
CAT_NAME VARCHAR(50) NOT NULL,
CAT_TAG VARCHAR(50) NOT NULL,
);

CREATE TABLE SUPPLIER(
SUPPLIER_ID INT PRIMARY KEY,
SUPPPLIER_NAME VARCHAR(50) NOT NULL,
SUPPLIER_CONTACT VARCHAR(50) NOT NULL,
);

CREATE TABLE CUS_ORDER(
ORDER_ID INT PRIMARY KEY,
CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMER (CUSTOMER_ID),
ORDER_DATE DATE NOT NULL,
TOT_AMOUNT INT NOT NULL,
SUBTOTAL INT NULL,
DISCOUNT_ID INT FOREIGN KEY REFERENCES DISCOUNT(DISCOUNT_ID)
)

CREATE TABLE SHIPPING(
SHIP_ID INT PRIMARY KEY,
ORDER_ID INT FOREIGN KEY REFERENCES CUS_ORDER (ORDER_ID),
SHIP_TR_NO INT NOT NULL,
SHIP_DATE DATE NOT NULL,
);

CREATE TABLE PAYMENT(
PAYMENT_ID INT PRIMARY KEY,
ORDER_ID INT FOREIGN KEY REFERENCES CUS_ORDER (ORDER_ID),
CARD_NR VARCHAR(30)NOT NULL,
EX_DATE DATE NOT NULL,
CVC INT NOT NULL,
CARD_FNAME VARCHAR(20) NOT NULL,
CARD_LNAME VARCHAR(20) NOT NULL,
);
 
 CREATE TABLE PRODUCT(
 PROD_ID INT PRIMARY KEY,
 PROD_NAME VARCHAR(50) NOT NULL,
 PROD_PRICE INT NOT NULL,
 SUPPLIER_ID INT FOREIGN KEY REFERENCES SUPPLIER(SUPPLIER_ID),
 );

 CREATE TABLE WARRANTY(
WAR_ID INT PRIMARY KEY,
PROD_ID INT FOREIGN KEY REFERENCES PRODUCT(PROD_ID),
WAR_LEN VARCHAR(20) NOT NULL,
 )

 CREATE TABLE INVENTORY(
 INV_ID INT PRIMARY KEY,
 PROD_ID INT FOREIGN KEY REFERENCES PRODUCT(PROD_ID),
 QOH INT NOT NULL,
 )

 CREATE TABLE REPAIR(
REP_ID INT PRIMARY KEY,
CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMER (CUSTOMER_ID),
REP_STAT BIT NOT NULL,
 )
 
 
 CREATE TABLE REPAIR_SERVICE(
 SERVICE_ID INT NOT NULL,
 REP_ID INT NOT NULL,
 CONSTRAINT PK_REPSEV PRIMARY KEY(SERVICE_ID, REP_ID),
 CONSTRAINT FK_REPSEV1 
	FOREIGN KEY (SERVICE_ID) REFERENCES SERVICE (SERVICE_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
 CONSTRAINT FK_REPSEV2
	FOREIGN KEY (REP_ID) REFERENCES REPAIR (REP_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
 );

  CREATE TABLE RET_ORDER(
 RETURN_ID INT NOT NULL,
 ORDER_ID INT NOT NULL,
 CONSTRAINT PK_RETORD PRIMARY KEY(RETURN_ID, ORDER_ID),
 CONSTRAINT FK_RETORD1 
	FOREIGN KEY (RETURN_ID) REFERENCES RETURN_ORDER (RETURN_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
 CONSTRAINT FK_RETORD2
	FOREIGN KEY (ORDER_ID) REFERENCES CUS_ORDER (ORDER_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
 )

  CREATE TABLE ORDER_ITEM(
   ORDER_ID INT NOT NULL,
   PROD_ID INT NOT NULL,
   CONSTRAINT PK_ORDIT PRIMARY KEY(PROD_ID, ORDER_ID),
    CONSTRAINT FK_ORDIT1 
	FOREIGN KEY (ORDER_ID) REFERENCES CUS_ORDER (ORDER_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
 CONSTRAINT FK_ORDIT2
	FOREIGN KEY (PROD_ID) REFERENCES PRODUCT (PROD_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
  )

  CREATE TABLE PROD_CATEG(
  PROD_ID INT NOT NULL,
 CAT_ID INT NOT NULL,
 CONSTRAINT PK_PRODCAT PRIMARY KEY(CAT_ID, PROD_ID),
  CONSTRAINT FK_PRODCAT1 
	FOREIGN KEY (CAT_ID) REFERENCES CATEGORY (CAT_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
 CONSTRAINT FK_PRODCAT2
	FOREIGN KEY (PROD_ID) REFERENCES PRODUCT (PROD_ID)
	ON DELETE CASCADE
	ON UPDATE CASCADE
  )

  DROP TABLE PROD_CATEG;
  DROP TABLE ORDER_ITEM;
  DROP TABLE RET_ORDER;
  DROP TABLE REPAIR_SERVICE;

  --INSERTION OF DATA

  --SERVICE
INSERT INTO SERVICE (SERVICE_ID, SERVICE_NAME, SERVICE_PRICE) VALUES
(1, 'Service A', 50),
(2, 'Service B', 75),
(3, 'Service C', 100),
(4, 'Service D', 120),
(5, 'Service E', 90);

SELECT * FROM SERVICE;

-- RETURN_ORDER
INSERT INTO RETURN_ORDER (RETURN_ID, RETURN_DATE, RETURN_REASON, REFUND_AMOUNT) VALUES
(1, '2024-01-18', 'Defective product', 20),
(2, '2024-01-17', 'Customer changed mind', 15),
(3, '2024-01-16', NULL, 30),
(4, '2024-01-15', 'Wrong item shipped', 25),
(5, '2024-01-14', 'Not satisfied', 40);

SELECT * FROM RETURN_ORDER;

-- CUSTOMER
INSERT INTO CUSTOMER (CUSTOMER_ID, CUS_USERNAME, CUS_PASSWORD, CUS_EMAIL, CUS_REG, CUS_DOB, ACCOUNT_STAT, CUS_FNAME, CUS_LNAME) VALUES
(1, 'lulzim123', 'strongpass', 'lulzim@email.com', '2024-01-18', '1992-08-20', 1, 'Lulzim', 'Berisha'),
(2, 'elona88', 'secure123', 'elona@email.com', '2024-01-17', '1988-02-15', 1, 'Elona', 'Hoxha'),
(3, 'ardit_21', 'safePWD', 'ardit@email.com', '2024-01-16', '1995-12-10', 1, 'Ardit', 'Krasniqi'),
(4, 'rina_m', 'password123', 'rina@email.com', '2024-01-15', '1990-07-05', 1, 'Rina', 'Mehmeti'),
(5, 'artan22', 'artanPass', 'artan@email.com', '2024-01-14', '1985-11-22', 1, 'Artan', 'Hyseni');

SELECT * FROM CUSTOMER;

-- DISCOUNT
INSERT INTO DISCOUNT (DISCOUNT_ID, DISCOUNT_CODE, DISCOUNT_PERC, EXP_DATE) VALUES
(1, 12345, 10, '2024-12-31'),
(2, 67890, 15, '2024-11-30'),
(3, 54321, 20, '2024-10-31'),
(4, 98765, 25, '2024-09-30'),
(5, 13579, 30, '2024-08-31');

SELECT * FROM DISCOUNT;

-- CATEGORY 
INSERT INTO CATEGORY (CAT_ID, CAT_NAME, CAT_TAG) VALUES
(1, 'Laptops', 'LAPTOPS'),
(2, 'Desktops', 'DESKTOPS'),
(3, 'Accessories', 'ACCESSORIES'),
(4, 'Software', 'SOFTWARE'),
(5, 'Peripherals', 'PERIPHERALS');

SELECT * FROM CATEGORY;

--SUPPPLIER
INSERT INTO SUPPLIER (SUPPLIER_ID, SUPPPLIER_NAME, SUPPLIER_CONTACT) VALUES
(1, 'Tech Solutions', 'techsolutions@email.com'),
(2, 'Hardware Haven', 'hardwarehaven@email.com'),
(3, 'Accessory Emporium', 'accessoryemporium@email.com'),
(4, 'Software Solutions', 'softwaresolutions@email.com'),
(5, 'Peripheral Paradise', 'peripheralparadise@email.com');

SELECT * FROM SUPPLIER;

-- CUS_ORDER 
INSERT INTO CUS_ORDER (ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOT_AMOUNT, SUBTOTAL, DISCOUNT_ID) VALUES
(1, 1, '2024-01-18', 2000, 1800, 1),
(2, 2, '2024-01-17', 1500, 1400, 2),
(3, 3, '2024-01-16', 3000, 2800, 3),
(4, 4, '2024-01-15', 2500, 2300, 4),
(5, 5, '2024-01-14', 4000, 3800, 5);

SELECT * FROM CUS_ORDER;

-- SHIPPING 
INSERT INTO SHIPPING (SHIP_ID, ORDER_ID, SHIP_TR_NO, SHIP_DATE) VALUES
(1, 1, 123456, '2024-01-19'),
(2, 2, 789012, '2024-01-18'),
(3, 3, 654321, '2024-01-17'),
(4, 4, 987654, '2024-01-16'),
(5, 5, 135790, '2024-01-15');

SELECT * FROM SHIPPING;

-- PAYMENT 
INSERT INTO PAYMENT (PAYMENT_ID, ORDER_ID, CARD_NR, EX_DATE, CVC, CARD_FNAME, CARD_LNAME) VALUES
(1, 1, '1234-5678-9012-3456', '2024-12-31', 123, 'Lulzim', 'Berisha'),
(2, 2, '5678-1234-9012-3456', '2024-11-30', 456, 'Elona', 'Hoxha'),
(3, 3, '9012-3456-5678-1234', '2024-10-31', 789, 'Ardit', 'Krasniqi'),
(4, 4, '3456-9012-5678-1234', '2024-09-30', 012, 'Rina', 'Mehmeti'),
(5, 5, '6789-0123-4567-8901', '2024-08-31', 345, 'Artan', 'Hyseni');

SELECT * FROM PAYMENT;

-- PRODUCT
INSERT INTO PRODUCT (PROD_ID, PROD_NAME, PROD_PRICE, SUPPLIER_ID) VALUES
(1, 'High-Performance Laptop', 1500, 1),
(2, 'Powerful Desktop PC', 1200, 2),
(3, 'Gaming Mouse', 50, 3),
(4, 'Office Suite Software', 200, 4),
(5, 'Wireless Keyboard', 80, 5);

SELECT * FROM PRODUCT;

-- WARRANTY
INSERT INTO WARRANTY (WAR_ID, PROD_ID, WAR_LEN) VALUES
(1, 1, '2 years'),
(2, 2, '3 years'),
(3, 3, '1 year'),
(4, 4, 'No warranty'),
(5, 5, '6 months');

SELECT * FROM WARRANTY;

-- INVENTORY 
INSERT INTO INVENTORY (INV_ID, PROD_ID, QOH) VALUES
(1, 1, 50),
(2, 2, 30),
(3, 3, 100),
(4, 4, 20),
(5, 5, 50);

SELECT * FROM INVENTORY;

-- REPAIR 
INSERT INTO REPAIR (REP_ID, CUSTOMER_ID, REP_STAT) VALUES
(1, 1, 1),
(2, 2, 0),
(3, 3, 1),
(4, 4, 0),
(5, 5, 1);

SELECT * FROM REPAIR;

-- ORDER_ITEM 
INSERT INTO ORDER_ITEM (ORDER_ID, PROD_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

SELECT * FROM ORDER_ITEM;

-- PROD_CATEG 
INSERT INTO PROD_CATEG (PROD_ID, CAT_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

SELECT * FROM PROD_CATEG;

-- REPAIR_SERVICE 
INSERT INTO REPAIR_SERVICE (SERVICE_ID, REP_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

SELECT * FROM REPAIR_SERVICE;

-- RET_ORDER 
INSERT INTO RET_ORDER (RETURN_ID, ORDER_ID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

SELECT * FROM RET_ORDER;

-- UPDATE DML

UPDATE PRODUCT
SET PROD_PRICE = 1600
WHERE PROD_ID = 1;

UPDATE CUSTOMER
SET CUS_EMAIL = 'lalala@gmail.com'
WHERE CUSTOMER_ID = 2;

UPDATE DISCOUNT
SET DISCOUNT_PERC = 18
WHERE DISCOUNT_ID = 2;


-- DELETE
DELETE FROM CUSTOMER
WHERE CUSTOMER_ID = 3;

DELETE FROM WARRANTY
WHERE WAR_ID = 5;

DELETE FROM PRODUCT
WHERE PROD_ID = 3;

-- JOIN 
--INNER JOIN
SELECT CUS_ORDER.ORDER_ID, CUS_ORDER.ORDER_DATE, CUS_ORDER.TOT_AMOUNT,
       CUSTOMER.CUS_USERNAME, CUSTOMER.CUS_EMAIL
FROM CUS_ORDER
INNER JOIN CUSTOMER ON CUS_ORDER.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID;

--LEFT JOIN 
SELECT PRODUCT.PROD_ID, PRODUCT.PROD_NAME, PRODUCT.PROD_PRICE,
       WARRANTY.WAR_LEN
FROM PRODUCT
LEFT JOIN WARRANTY ON PRODUCT.PROD_ID = WARRANTY.PROD_ID;

--RIGHT JOIN

SELECT SERVICE.SERVICE_ID, SERVICE.SERVICE_NAME, SERVICE.SERVICE_PRICE,
       REPAIR_SERVICE.REP_ID
FROM SERVICE
RIGHT JOIN REPAIR_SERVICE ON SERVICE.SERVICE_ID = REPAIR_SERVICE.SERVICE_ID;

-- FULL JOIN

SELECT COALESCE(CUS_ORDER.ORDER_ID, SHIPPING.ORDER_ID) AS ORDER_ID,
       CUS_ORDER.ORDER_DATE, CUS_ORDER.TOT_AMOUNT,
       SHIPPING.SHIP_ID, SHIPPING.SHIP_TR_NO, SHIPPING.SHIP_DATE
FROM CUS_ORDER
FULL JOIN SHIPPING ON CUS_ORDER.ORDER_ID = SHIPPING.ORDER_ID;

--USAGE OF ADV SQL FEATURES

--GROUP BY
SELECT
    CUSTOMER_ID,
    COUNT(ORDER_ID) AS NumberOfOrders,
    AVG(TOT_AMOUNT) AS AverageOrderTotal
FROM
    CUS_ORDER
GROUP BY
    CUSTOMER_ID
HAVING
    COUNT(ORDER_ID) > 1;

--ORDER BY
SELECT
    ORDER_ID,
    TOT_AMOUNT,
    ORDER_DATE
FROM
    CUS_ORDER
ORDER BY
    TOT_AMOUNT DESC,
    ORDER_DATE ASC;

--NESTED QUERY
SELECT *
FROM CUSTOMER
WHERE CUSTOMER_ID IN (
    SELECT CUSTOMER_ID
    FROM CUS_ORDER
    WHERE TOT_AMOUNT > 2000
);

-- Retrieve Customer Information and Order Details

SELECT C.CUSTOMER_ID, C.CUS_USERNAME, O.ORDER_ID, O.ORDER_DATE, O.TOT_AMOUNT
FROM CUSTOMER C
JOIN CUS_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.TOT_AMOUNT > (
    SELECT AVG(TOT_AMOUNT)
    FROM CUS_ORDER
);

--ORDERS MADE AT LEAST 2 DAYS AGO

SELECT ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOT_AMOUNT
FROM CUS_ORDER
WHERE DATEDIFF(DAY, ORDER_DATE, GETDATE()) >= 2;







--VIEWS
CREATE VIEW OrderCustomerView AS
SELECT
    CUS_ORDER.ORDER_ID,
    CUS_ORDER.ORDER_DATE,
    CUS_ORDER.TOT_AMOUNT,
    CUSTOMER.CUS_USERNAME,
    CUSTOMER.CUS_EMAIL
FROM
    CUS_ORDER
INNER JOIN
    CUSTOMER ON CUS_ORDER.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID;

	SELECT * FROM OrderCustomerView;

--STORED FUNCTION
CREATE FUNCTION dbo.CalcDiscountedTotal(@orderId INT)
RETURNS INT
AS
BEGIN
    DECLARE @discountPercentage INT;
    DECLARE @orderTotal INT;

    -- The discount percentage and total amount for the order
    SELECT 
        @discountPercentage = COALESCE(DISCOUNT.DISCOUNT_PERC, 0),
        @orderTotal = TOT_AMOUNT
    FROM 
        CUS_ORDER
    LEFT JOIN 
        DISCOUNT ON CUS_ORDER.DISCOUNT_ID = DISCOUNT.DISCOUNT_ID
    WHERE 
        CUS_ORDER.ORDER_ID = @orderId;

    -- Calculation of the discounted total
    RETURN @orderTotal - (@orderTotal * @discountPercentage / 100);
END;
GO

-- EXECUTION
SELECT dbo.CalcDiscountedTotal(1) AS DiscountedTotal;


--STORED PROCEDURES
--1
--CALCULATE THE DISCOUNTED TOTAL
CREATE PROCEDURE dbo.CalculateAndDisplayDiscountedTotal
    @orderId INT
AS
BEGIN
    DECLARE @discountedTotal INT;

    -- Calculate the discounted total using the function
    SELECT @discountedTotal = dbo.CalculateDiscountedTotal(@orderId);

    --Result
    PRINT 'Discounted Total for Order ' + CAST(@orderId AS NVARCHAR) + ': ' + CAST(@discountedTotal AS NVARCHAR);
END;
GO

-- EXECUTION
EXEC dbo.CalculateAndDisplayDiscountedTotal @orderId = 3; 


--2

-- RETRIEVING INFO ABOUT CUSTOMER ORDERS
CREATE PROCEDURE dbo.GetCustomerOrders
    @customerId INT
AS
BEGIN
    -- Retrieve customer information
    SELECT 
        CUS_USERNAME,
        CUS_EMAIL,
        CUS_REG,
        CUS_DOB
    FROM 
        CUSTOMER
    WHERE 
        CUSTOMER_ID = @customerId;

    -- Retrieve customer's orders
    SELECT 
        ORDER_ID,
        ORDER_DATE,
        TOT_AMOUNT
    FROM 
        CUS_ORDER
    WHERE 
        CUSTOMER_ID = @customerId;
END;
GO

-- EXECUTION
EXEC dbo.GetCustomerOrders @customerId = 1; 


--TRIGGERS
-- Create the trigger
-- 1
CREATE TRIGGER trg_UpdateOrderDate
ON CUS_ORDER
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Update ORDER_DATE to the current date and time for newly inserted orders
    UPDATE o
    SET ORDER_DATE = COALESCE(o.ORDER_DATE, GETDATE())
    FROM CUS_ORDER o
    INNER JOIN inserted i ON o.ORDER_ID = i.ORDER_ID;
END;


INSERT INTO CUS_ORDER (ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOT_AMOUNT, SUBTOTAL, DISCOUNT_ID)
VALUES (6, 2, '2024-01-18', 200, 800, 3);

SELECT * FROM CUS_ORDER;

--2
-- Create a trigger to update SUBTOTAL in CUS_ORDER
CREATE TRIGGER trg_UpdateSubtotal
ON CUS_ORDER
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- Update SUBTOTAL based on discount
    UPDATE CUS_ORDER
    SET SUBTOTAL = IIF(i.DISCOUNT_ID IS NOT NULL, 
                        CUS_ORDER.TOT_AMOUNT - (CUS_ORDER.TOT_AMOUNT * D.DISCOUNT_PERC / 100), 
                        CUS_ORDER.TOT_AMOUNT)
    FROM CUS_ORDER
    INNER JOIN inserted i ON CUS_ORDER.ORDER_ID = i.ORDER_ID
    LEFT JOIN DISCOUNT D ON i.DISCOUNT_ID = D.DISCOUNT_ID;
END;

INSERT INTO CUS_ORDER (ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOT_AMOUNT, SUBTOTAL, DISCOUNT_ID)
VALUES (7, 3, '2024-01-19', 3000, NULL, 3);

SELECT * FROM CUS_ORDER;
